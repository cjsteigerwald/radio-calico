name: Security Scanning

on:
  schedule:
    # Run security scans every Monday at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - 'Dockerfile*'
      - '.github/workflows/security.yml'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  comprehensive-security-scan:
    name: Comprehensive Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install security tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl wget

    - name: Run full security assessment using Makefile
      id: security-full
      run: |
        make security-full || true
        make security-metrics || true

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v4
      with:
        name: security-full-report
        path: |
          security-full-report.txt
          security-metrics.txt
          security-report.json
          docs/security-scans/

    - name: Run Snyk security test
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'RadioCalico'
        path: '.'
        format: 'HTML,JSON'
        args: >
          --enableRetired
          --enableExperimental
      continue-on-error: true

    - name: Upload OWASP results
      uses: actions/upload-artifact@v4
      with:
        name: owasp-dependency-check
        path: reports/
      if: always()

  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Docker images using Makefile
      run: |
        make build
        docker tag radiocalico:latest radiocalico:prod
        make dev-build || docker build -t radiocalico:dev -f Dockerfile.dev .

    - name: Run Trivy on production image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'radiocalico:prod'
        format: 'sarif'
        output: 'trivy-prod-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy production results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-prod-results.sarif'
        category: 'container-prod'

    - name: Run Trivy on dev image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'radiocalico:dev'
        format: 'sarif'
        output: 'trivy-dev-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy dev results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-dev-results.sarif'
        category: 'container-dev'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'radiocalico:prod'
        fail-build: false
        severity-cutoff: high

    - name: Upload Grype results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
        category: 'grype'
      if: always()

  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run secret scanning using Makefile
      run: |
        make security-secrets
      continue-on-error: true

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true

    - name: GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run SAST using Makefile
      run: |
        npm install --save-dev eslint-plugin-security eslint-plugin-no-secrets
        make security-sast
        make security-lint > eslint-security.txt 2>&1 || true

    - name: Upload SAST results
      uses: actions/upload-artifact@v4
      with:
        name: sast-security-report
        path: eslint-security.txt

    - name: Run NodeJsScan
      uses: ajinabraham/njsscan-action@master
      with:
        args: '. --sarif --output results.sarif || true'

    - name: Upload NodeJsScan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
        category: 'njsscan'
      if: always()

    - name: Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/nodejs
          p/javascript
          p/owasp-top-ten
      continue-on-error: true

  create-issues:
    name: Create Security Issues
    runs-on: ubuntu-latest
    needs: [comprehensive-security-scan, container-security, secret-scanning, sast-analysis]
    if: failure()

    steps:
    - name: Create issue for security vulnerabilities
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Scan Alert - ${date}`,
            body: `## Security Scan Results

            The automated security scan has detected potential vulnerabilities.

            **Workflow Run:** [${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

            Please review the security scan results and take appropriate action.

            ### Actions Required:
            - [ ] Review npm audit results
            - [ ] Review container scan results
            - [ ] Check for exposed secrets
            - [ ] Review SAST findings
            - [ ] Update dependencies if needed
            - [ ] Apply security patches

            **Priority:** High
            **Labels:** security, automated`,
            labels: ['security', 'automated-scan']
          });
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}