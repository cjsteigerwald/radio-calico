name: Pull Request Check

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check commit messages
      run: |
        git log --format='%s' origin/${{ github.base_ref }}..HEAD | while read commit_msg; do
          if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,}'; then
            echo "Invalid commit message: $commit_msg"
            echo "Commit messages should follow conventional commits format"
            exit 1
          fi
        done
      continue-on-error: true

    - name: Run tests using Makefile
      id: tests
      run: |
        make test-all > test-output.txt 2>&1 || true
        echo "test_exit_code=$?" >> $GITHUB_OUTPUT
        if [ -f test-output.txt ]; then
          echo "Tests completed. Check artifacts for details."
        fi

    - name: Run linter
      id: lint
      run: |
        npx eslint . --ext .js --format json --output-file eslint-results.json || true
        if [ -f eslint-results.json ]; then
          errors=$(cat eslint-results.json | jq '[.[] | .errorCount] | add')
          warnings=$(cat eslint-results.json | jq '[.[] | .warningCount] | add')
          echo "lint_errors=${errors:-0}" >> $GITHUB_OUTPUT
          echo "lint_warnings=${warnings:-0}" >> $GITHUB_OUTPUT
        fi

    - name: Check for security issues using Makefile
      id: security
      run: |
        make security-quick > security-quick.txt 2>&1 || true
        make security-check || true
        if [ -f security-report.json ]; then
          vulnerabilities=$(cat security-report.json | jq '.metadata.vulnerabilities.total // 0')
          echo "vulnerabilities=${vulnerabilities}" >> $GITHUB_OUTPUT
        fi

    - name: Check bundle size and file metrics
      run: |
        echo "Checking bundle sizes..."
        echo "JavaScript files:"
        find public -name "*.js" -exec du -h {} \; | sort -rh | head -20
        echo ""
        echo "CSS files:"
        find public -name "*.css" -exec du -h {} \; | sort -rh | head -10
        echo ""
        echo "Total size of public directory:"
        du -sh public/
      continue-on-error: true

    - name: Post PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const testExitCode = parseInt('${{ steps.tests.outputs.test_exit_code }}') || 1;
          const lintErrors = parseInt('${{ steps.lint.outputs.lint_errors }}') || 0;
          const lintWarnings = parseInt('${{ steps.lint.outputs.lint_warnings }}') || 0;
          const vulnerabilities = parseInt('${{ steps.security.outputs.vulnerabilities }}') || 0;

          let comment = '## Pull Request Check Results\n\n';
          comment += '### Test Results\n';
          comment += testExitCode === 0 ? '✅ All tests passed\n\n' : '⚠️ Some tests may have failed - check artifacts\n\n';

          comment += '### Code Quality\n';
          comment += `- Lint Errors: ${lintErrors === 0 ? '✅' : '❌'} ${lintErrors}\n`;
          comment += `- Lint Warnings: ${lintWarnings === 0 ? '✅' : '⚠️'} ${lintWarnings}\n\n`;

          comment += '### Security\n';
          comment += `- Vulnerabilities: ${vulnerabilities === 0 ? '✅' : '❌'} ${vulnerabilities}\n\n`;

          if (lintErrors > 0 || vulnerabilities > 0) {
            comment += '### Action Required\n';
            comment += 'Please fix the issues above before merging.\n';
          } else {
            comment += '### Status\n';
            comment += '✅ Ready for review\n';
          }

          // Find and update existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Pull Request Check Results')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check file sizes
      run: |
        echo "File sizes:"
        find public -name "*.js" -exec du -h {} \; | sort -rh | head -20
        find public -name "*.css" -exec du -h {} \; | sort -rh | head -10